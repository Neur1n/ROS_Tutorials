http://wiki.ros.org/catkin/CMakeLists.txt

NOTE This documentation is based on the package "igv_motion".

#=============================================================================== 1. CMake Version
cmake_minimum_required(VERSION 2.8.3)

#=============================================================================== 2. Package Name
project(igv_motion)
#
# NOTE In CMake you can reference the project name anywhere later in the CMake 
# script by using the variable ${PROJECT_NAME} wherever needed.
#

#=============================================================================== 3. Find Dependent
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
)
#
# There is always at least 1 dependency on "catkin". If the project depends on
# other packages, they are turned into components of catkin. This is equivalent
# to but easier than the following method:
#
#	  find_package(catkin REQUIRED)
#	  find_package(roscpp REQUIRED)
#	  find_package(std_msgs REQUIRED)
#

NOTE If using C++ and Boost, you need to invoke find_package() on Boost and 
 	 specify which aspects of Boost you are using as components. For example, 
	 if you wanted to use Boost threads, you would say:

		 find_package(Boost REQUIRED COMPONENTS thread)

#=============================================================================== 4. catkin_package
NOTE Used to generate pkg-config and CMake files.
     
     This function must be called before declaring any targets with 
     add_library() or add_executable(). It takes 5 optional arguments:

	 (1) INCLUDE_DIRS: the exported include paths (i.e. cflags) for the package
	                   (http://wiki.ros.org/Packages#Common_Files_and_Directories)

     (2) LIBRARIES: the exported libraries from the project

	 (3) CATKIN_DEPENDS: other catkin projects that this project depends on

	 (4) DEPENDS: non-catkin CMake projects that this project depends on

	 (5) CFG_EXTRAS: additional configuration options 

#=============================================================================== 5. Build Targets
NOTE Section 5.1 and 5.2 are not in the automatically generated CMakeLists.txt. 
#-------------------------------------------------------------------------- 5.1 Naming
Example:

	set_target_properties(rviz_image_view
						  PROPERTIES OUTPUT_NAME image_view
						  PREFIX "")
#
# Changing the name of target "rviz_image_view" to "image_view" in the build
# and install outputs.
#

#-------------------------------------------------------------------------- 5.2 Output Directory
Example:

	set_target_properties(python_module_library
		PROPERTIES 
	  	LIBRARY_OUTPUT_DIRECTORY 
	  	${CATKIN_DEVEL_PREFIX}/${CATKIN_PACKAGE_PYTHON_DESTINATION})
#
# NOTE The layout of the arguments here is not the same as the one on the 
#      website.
#

#-------------------------------------------------------------------------- 5.3 Include Path
Include paths: where can header files be found for the code (most common in 
			   C/C++) being built

The argument to "include_directories()" should be the "*_INCLUDE_DIRS" 
variables generated by your find_package calls and any additional directories 
that need to be included. If you are using catkin and Boost, it should look 
like:

	include_directories(include ${Boost_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

#-------------------------------------------------------------------------- 5.4 Library Path
NOTE This is not included in the automatically generated CMakeLists.txt and it 
     is not recommended.

	 All catkin and CMake packages automatically have their link information 
	 added when they are find_packaged. Simply link against the libraries in 
	 target_link_libraries().

#-------------------------------------------------------------------------- 5.5 Executable Target
add_executable(<name> <source_file_1> <source_file_2> ...)

Example:

	add_executable(myProgram src/main.cpp src/some_file.cpp src/another_file.cpp)
#
# Building a target executable called "myProgram" from 3 source files.
#

#-------------------------------------------------------------------------- 5.6 Library Target
add_library(${PROJECT_NAME} 
	${${PROJECT_NAME}_SRCS}
)
#
# Example:
#
#	  # add_library(igv_motion
#	  #   src/${PROJECT_NAME}/igv_motion.cpp
#	  # )
#
# It is commented out initially when CMakeLists.txt is generated.
#

#-------------------------------------------------------------------------- 5.7 target_link_libraries
* Mentioned on line 94.

target_link_libraries(<executableTargetName>, <lib1>, <lib2>, ... <libN>)
#
# Used to specify which libraries an executable target links against. This is 
# done typically after an add_executable() call. 
# 
# NOTE Add ${catkin_LIBRARIES} if ros is not found.
#      (http://answers.ros.org/question/63656/
#      how-to-solve-undefined-reference-to-rosinit-on-groovy/
#      ?answer=63674#post-id-63674)
#
# Example:
#
#	  add_executable(foo src/foo.cpp)
#	  add_library(moo src/moo.cpp)
#	  target_link_libraries(foo moo)  -- This links foo against libmoo.so
#

#=============================================================================== 6. msg, arv, action
The 3 macros:

	add_message_files()
	add_service_files()
	add_action_files()
#
# NOTE and the find_package() before them, which must has "message_generation" 
#      in it as a component.
#

must be followed by:

	generate_message()

And all above must come BEFORE catkin_package(), which must have a 
CATKIN_DEPENDS dependency on "message_runtime":

	catkin_package(
		...
		CATKIN_DEPENDS message_runtime ...
		...)

NOTE
(1) Your package.xml file must contain a build dependency on message_generation 
	and a runtime dependency on message_runtime. This is not necessary if the 
	dependencies are pulled in transitively from other packages.

(2) If you have a package which builds messages and/or services as well as 
	executables that use them, you need to create an explicit dependency on the
	automatically-generated message target so that they are built in the 
	correct order. 

		add_dependencies(some_target ${${PROJECT_NAME}_EXPORTED_TARGETS}) 
		#
		# "some_target" is the name of the target set by add_executable()
		#

#=============================================================================== 7. Unit Test
catkin_add_gtest(myUnitTest test/utest.cpp)
#
# A catkin-specific macro for handling gtest-based unit tests.
#

#=============================================================================== 8. Install
install()
#
# It takes 4 arguments:
#
#	  (1) TARGETS: targets to install
#	  
#	  (2) ARCHIVE DESTINATION: static libraries and DLL (Windows) .lib stubs
#	  
#	  (3) LIBRARY DESTINATION: non-DLL shared libraries and modules
#	  
#	  (4) RUNTIME DESTINATION: Executable targets and DLL (Windows) style 
#							   shared libraries
# 
# Example:
#
#	  install(TARGETS ${PROJECT_NAME}
#		ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#		LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#		RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
#	  )
#
# NOTE Besides these standard destination some files must be installed to 
#      special folders. I.e. a library containing Python bindings must be 
#      installed to a different folder to be importable in Python:
#
#		   install(TARGETS python_module_library
#			 ARCHIVE DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
#			 LIBRARY DESTINATION ${CATKIN_PACKAGE_PYTHON_DESTINATION}
#		   )
#

#-------------------------------------------------------------------------- 8.1 Python Scrip
TODO Go to website for details

#-------------------------------------------------------------------------- 8.2 Header Files
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  PATTERN ".svn" EXCLUDE
)
#
# Header files must also be installed to the "include" folder, This is often
# done by installing the files of an entire folder (optionally filtered by 
# filename patterns and excluding SVN subfolders).
#

#-------------------------------------------------------------------------- 8.3 roslaunch
install(DIRECTORY launch/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/launch
  PATTERN ".svn" EXCLUDE)
