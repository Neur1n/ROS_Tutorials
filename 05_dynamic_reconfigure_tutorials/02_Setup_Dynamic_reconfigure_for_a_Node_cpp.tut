http://wiki.ros.org/dynamic_reconfigure/Tutorials/SettingUpDynamicReconfigureForANode%28cpp%29

#=============================================================================== 1. Code
$ roscd learn_dynamic_reconfigure
$ gvim src/server.cpp
#
# Get the code from the website.
#

#=============================================================================== 2. Code Explanation
4 #include "learn_dynamic_reconfigure/TutorialsConfig.h"
#
# The header file generated by dynamic_reconfigure from the .cfg file.
#

6 void callback(..., ...)
#
# This is the callback that will get called when the dynamic_reconfigure server
# is sent a new configuration. It takes two parameters, the first is the new 
# config. The second is the level, which is the result of ORing together all of
# level values of the parameters that have changed. What you want to do with 
# the level value is entirely up to you, for now it is unnecessary. All we are 
# going to do in the callback is print out the configuration.
#

17 dynamic_reconfigure::Server<learn_dynamic_reconfigure::TutorialsConfig> server;
#
# Define the dynamic_reconfigure server, passing it our config type. As long as
# the server lives (in this case until the end of main()), the node listens to 
# reconfigure requests.
#

18 dynamic_reconfigure::Server<learn_dynamic_reconfigure::TutorialsConfig>::CallbackType f;
19 
20 f = boost::bind(&callback, _1, _2);
21 server.setCallback(f);
#
# Define a variable to represent our callback and then send it to the server. 
# Now when the server gets a reconfiguration request it will call our callback 
# function.
#

#=============================================================================== 3. Run Code
$ roscore
$ rosrun learn_dynamic_reconfigure example_node
$ rosrun rqt_reconfigure rqt_reconfigure
