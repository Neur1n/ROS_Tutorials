http://wiki.ros.org/actionlib_tutorials/Tutorials/SimpleActionServer%28GoalCallbackMethod%29

#=============================================================================== 1. Action Messages
$ roscd learn_actionlib
$ gvim action/Averaging.action

To automatically generate the messages files, make sure the followings are
included in CMakeLists.txt:

    find_package(catkin REQUIRED COMPONENTS # line 7
        actionlib 
        std_msgs 
        message_generation
    )

    add_action_files(                       # line 64
        DIRECTORY action 
        ...
        FILES Averaging.action              # NOTE only this line is new
    )

    generate_messages(                      # line 70
        DEPENDENCIES 
        std_msgs 
        actionlib_msgs
    )
#
# To manually generate the message files:
#
#     $ roscd learn_actionlib
#     $ rosrun actionlib_msgs genaction.py -o msg/ action/Averaging.action
#

$ cd ../..
$ catkin_make --pkg learn_actionlib

#=============================================================================== 2. Code
$ cd -
$ gvim src/averaging_server.cpp

#=============================================================================== 3. Code Explanation
15 as_.registerGoalCallback(boost::bind(&AveragingAction::goalCB, this));
16 as_.registerPreemptCallback(boost::bind(&AveragingAction::preemptCB, this));
#
# The goal and preempt callbacks are registered with the action server in the 
# constructor for the action after the action server has been constructed.
#

19 sub_ = nh_.subscribe("/random_number", 1, &AveragingAction::analysisCB, this);
#
# A callback is setup for the data that will be processed by the action.
#

27 void goalCB()
28 {
29     // reset helper variables
30     data_count_ = 0;
31     sum_ = 0;
32     sum_sq_ = 0;
33     // accept the new goal
34     goal_ = as_.acceptNewGoal()->samples;
35 }
#
# The goalCB function referenced in the constructor. The callback function 
# returns nothing and takes no arguments. When the goalCB is called the action
# needs to accept the goal and store any important information. If you need to
# see the goal before you accept it, see the SimpleActionServer
# (ExecuteCallbackMethod) tutorial.
# 
# * Check file "02_Write_AS_with_Execute_Callback.tut" 
#
#   or go to
#
#   http://wiki.ros.org/actionlib_tutorials/Tutorials/SimpleActionServer%28ExecuteCallbackMethod%29
#

37 void preemptCB()
38 {
39     ROS_INFO("%s: Preempted", action_name_.c_str());
40     // set the action state to preempted
41     as_.setPreempted();
42 }
#
# This action is event driven, the action code only runs when the callbacks 
# occur therefore a preempt callback is created to ensure that the action 
# responds promptly to a cancel request. The callback function takes no 
# arguments and sets preempted on the action server.
#

#=============================================================================== 4. Compile & Run
Append the following to CMakeLists.txt:

    add_executable(averaging_server src/averaging_server.cpp)
    target_link_libraries(averaging_server ${catkin_LIBRARIES})

$ roscd learn_actionlib
$ cd ../..
$ catkin_make --pkg learn_actionlib

$ roscore
$ rosrun learn_actionlib averaging_server
