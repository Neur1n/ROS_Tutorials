#=============================================================================== 1. Service Node
$ roscd beginner_tutorials
$ gvim src/add_two_ints_server.cpp
#
# Code is given by: wiki.ros.org/ROS/Tutorials/WritingServiceClient(c%2B%2B)
#

#=============================================================================== 2. Code Explanation
2 #include "beginner_tutorials/AddTwoInts.h"
#
# This is the header file generated from the srv file that we created earlier,
# which is in ~/Documents/learnros_ws/devel/include/beginner_tutorials/. Check
# the file "09_ROS_msg_n_srv.tut" line 208.
#

4 bool add(beginner_tutorials::AddTwoInts::Request  &req,
5          beginner_tutorials::AddTwoInts::Response &res)
#
# This function provides the service for adding two ints, it takes in the
# request and response type defined in the srv file and returns a boolean.
#

6  {
7      res.sum = req.a + req.b;
8      ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);
9      ROS_INFO("sending back response: [%ld]", (long int)res.sum);
10     return true;
11 }
#
# Here the two ints are added and stored in the response. Then some information
# about the request and response are logged. Finally the service returns true
# when it is complete.
#

18 ros::ServiceServer service = n.advertiseService("add_two_ints", add);
#
# Here the service is created and advertised over ROS.
#

#=============================================================================== 3. Client Node
$ gvim src/add_two_ints_client.cpp
#
# Code is given by: wiki.ros.org/ROS/Tutorials/WritingServiceClient(c%2B%2B)
#

#=============================================================================== 4. Code Explanation
15 ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");
#
# This creates a client for the add_two_ints service. The ros::ServiceClient 
# object "client" is used to call the service later on
#

16 beginner_tutorials::AddTwoInts srv;
17 srv.request.a = atoll(argv[1]);
18 srv.request.b = atoll(argv[2]);
#
# Instantiate an autogenerated service class and assign values into its request
# member. A service class contains two members, request and response. It also 
# contains two class definitions, Request and Response.
#

19 if (client.call(srv))
#
# This actually calls the service. Since service calls are blocking, it will 
# return once the call is done. If the service call succeeded, call() will 
# return true and the value in srv.response will be valid. If the call did not 
# succeed, call() will return false and the value in srv.response will be 
# invalid.
#

#=============================================================================== 5. Building Nodes
Append the following to the .../beginner_tutorials/CMakeLists.txt:

    add_executable(add_two_ints_server src/add_two_ints_server.cpp)
    target_link_libraries(add_two_ints_server ${catkin_LIBRARIES})
    add_dependencies(add_two_ints_server beginner_tutorials_gencpp)

    add_executable(add_two_ints_client src/add_two_ints_client.cpp)
    target_link_libraries(add_two_ints_client ${catkin_LIBRARIES})
    add_dependencies(add_two_ints_client beginner_tutorials_gencpp)
#
# These are similar to the previous work while writing Publisher and Subscriber.
# For more details, check the file "10_Publisher_n_Subscriber_cpp.tut" line 194.
#

$ cd ../..
$ catkin_make
